######################################
#### DATA LOADING & PREPROCESSING ####
######################################
rm(list=ls())
library(fmsb)
library(xlsx)
library(RSKC)
library(sparcl)
library(factoextra)
library(cluster)
library(NbClust)
library(ggplot2)
library(GGally)
library(VIM)
library(readr)
library(translate)
library(data.table)
library(plyr)
library(dplyr)
library(compare)
library(reshape2)
library(mice)
library(caret)
library(Boruta)
library(cluster)
library(tibble)
options(java.parameters = "-Xmx50000m")
# Ridit Function
ridit_scores=function(y){
  x = vector('numeric')
  for (i in 1:length(y)) {
    
    x[i]=(sum(y[1:i])-sum(y[length(y):(i)]))
  }
  return(x)
}
# Mode Function
Mode <- function(x, na.rm = FALSE) {
  if(na.rm){
    x = x[!is.na(x)]
  }
  ux <- unique(x)
  return(ux[which.max(tabulate(match(x, ux)))])
}
# Density GG Function
density_gg = function (df,a,b){
  ggplot(df,aes(x = a)) + geom_density(aes(group = b, colour = b, fill = b), alpha = 0.3)
}
stacked_gg = function (df,a,b){
  ggplot(df, aes(x = a, fill = b)) + 
    geom_bar(position = "fill") +
    theme(axis.text.x = element_text(angle = 90))
}

# Log adjusted for integer variables Function
log_int = function(x){
  ifelse(x==0,-1,log(x))
}
log_neg = function(x){
  ifelse(x < 1 & x > -1,0,ifelse(x<0,-log(abs(x)),log(x)))
}
# Load data properly
setwd("C:/Users/orteg/Dropbox/MC2BIS/VS - OPT data")
data=fread("Hungarian_Data_CSV_for_R_updated_col_names_ converted_all_cont_to_num_type_and_filled_missing_values_with_dots..replaces X's with NA's Customer_Region.csv",
           na.strings = c('',' ','NA','#N/A','.'))
data = data[1:57384,] # Adjusting the size JC

# Make one new variable - if customer branch and account branch are equal then 1 and if not then 0, otherwise NA
data$Customer_Equals_Account = ifelse(data$CUSTOMER_BRANCH==data$ACCOUNT_BRANCH,0,1)
data<- subset(data, select = -c(EqualTo,SC16_17_18_2nd_party_Country,Compound_ID,
                              ALERT_CUSTOMER_SEGMENT,CREDIT_DEBIT,Unique,REASON_FOR_CLOSURE,
                              DESCRIPTION,CREATION_DATE,CREATION_DATE,LAST_UPDATED,EVENT_DATE,
                              AGE_IN_DAYS,ACTION_NUM, TRANSACTION_ID, TXN_TYPE_DESC, ASSIGNED_TO,
                              ASSIGNED_BY,ORIGINAL_CURRENCY_AMOUNT,ORIGINAL_CURRENCY,POSTAL_CODE,
                              BRANCH_ID,BUSINESS_TYPE,COUNTRY_OF_RESIDENCE,ACCOUNT_BALANCE,
                              HOLDING_BANK_NAME,CUSTOMER_BRANCH,ACCOUNT_BRANCH,BRANCH_CODE,
                              CASE_KEY, CASE_IDENTIFIER,NUM_ALERTS,NUM_CUSTOMERS,CASE_CREATION_DATE,
                              INVESTIGATION_LENGTH,NORKOM_SCORE,TRANSACTION_DATE,RISK_SCORE_1, RISK_SCORE_2))
data$NEW_ACCOUNT_BALANCE = as.numeric(data$NEW_ACCOUNT_BALANCE)
data$BASE_CURRENCY_AMOUNT=as.numeric(data$BASE_CURRENCY_AMOUNT)
# Creating Response Variable (SAR)
n=dim(data)[1]
data$SAR= ifelse(data$CASE_STATUS=="Reported/Closed",1,0)
data$SAR[with(data,is.na(data$SAR) & data$STATUS_NAME=="Closed" )]=0
data$SAR[with(data,is.na(data$SAR) & data$STATUS_NAME=="Linked Closed" )]=0
data$SAR=as.factor(data$SAR)
data$CUSTOMER_SEGMENT=as.factor(data$CUSTOMER_SEGMENT)
data$EVENT_MONTH=as.factor(data$EVENT_MONTH)
data$EVENT_MONTH = factor(data$EVENT_MONTH,levels(data$EVENT_MONTH)[c(5, 4, 8, 1, 9, 7, 6,
                                                                      2, 12, 11, 10, 3)])
# Delete NA values from SAR variable
datanew = data[with(data,!is.na(data$SAR))]
# After creation of SAR I can now delete STATUS_NAME and CASE_STATUS
datanew = subset(datanew,select=-c(CASE_STATUS,STATUS_NAME))
# Remove duplicates in column names
duplicates_datanew = datanew[,!duplicated(names(datanew))]
datanew = datanew[,duplicates_datanew,with=F]


# Divide into the Up-Bottom segments: ORG (SME, GOV, REG) & PRIV (PRIV)
datanew_priv=filter(datanew,CUSTOMER_SEGMENT=='PRIV')
datanew_org=filter(datanew,CUSTOMER_SEGMENT=='GOV' | CUSTOMER_SEGMENT=='SME'| CUSTOMER_SEGMENT=='REG')
datanew_org=subset(datanew_org,select=-c(CUSTOMER_TYPE,CAL_QUARTER))




##################################################
# MISSING VALUES & VARIABLE TRANSF. 1st PART #####
##################################################

# Ranking of Missing Values
rankmissing = (sapply(datanew_org,function(x) mean(is.na(x))) %>%
                 sort())
names_miss=names(rankmissing[which(rankmissing < 0.15)])
# some variables' NA are actually informative
datanew_org$DISTRICT_OF_BUDAPEST[is.na(datanew_org$DISTRICT_OF_BUDAPEST)] = "OUTSIDE_BUDAPEST"
datanew_org$TXN_TYPE[is.na(datanew_org$TXN_TYPE)] = "NOT_A_SINGLE_TRANSACTION"
datanew_org$INSTRUMENT[is.na(datanew_org$INSTRUMENT)] = "NOT_A_SINGLE_TRANSACTION"
datanew_org$SCOPE[is.na(datanew_org$SCOPE)] = "NOT_A_SINGLE_TRANSACTION"
datanew_org$REGION[is.na(datanew_org$REGION)] = "NOT_A_SINGLE_TRANSACTION"

datanew_org$BASE_CURRENCY_AMOUNT = datanew_org$BASE_CURRENCY_AMOUNT  %>% cut(c(quantile(datanew_org$BASE_CURRENCY_AMOUNT,
                                                                                             na.rm = T))) %>% addNA()
levels(datanew_org$BASE_CURRENCY_AMOUNT)[is.na(levels(datanew_org$BASE_CURRENCY_AMOUNT))] = "NOT_A_SINGLE_TRANSACTION"

# Transforming from Chr to Factor
var_chr=names(datanew_org[names(datanew_org) %in% names(select_if(datanew_org, is.character))])
datanew_org[var_chr]=lapply(datanew_org[var_chr],factor)
datanew_org$SC01_Amount_Exceding_250000__HUF_=factor(datanew_org$SC01_Amount_Exceding_250000__HUF_)
datanew_org$Customer_Equals_Account = factor(datanew_org$Customer_Equals_Account)
# Again Ranking of Missing Values
rankmissing2 = (sapply(datanew_org,function(x) mean(is.na(x))) %>%
                 sort())
names_miss2=names(rankmissing2[which(rankmissing2 < 0.15)])
# Create new dataset with the least missing variables
refined_org=datanew_org[names_miss2]



#################################################
# MISSING VALUES & VARIABLE TRANSF. 2nd PART ####
#################################################

mrefined_org=refined_org

# Missing Values - Numerical: Using Median

mrefined_org$NEW_ACCOUNT_BALANCE[is.na(mrefined_org$NEW_ACCOUNT_BALANCE)]=median(mrefined_org$NEW_ACCOUNT_BALANCE,na.rm = T)

# Missing Values - Category: Using Mode
mrefined_org$Customer_Equals_Account = as.character(mrefined_org$Customer_Equals_Account)
  Mode_ORI_ACC_CUR = Mode(mrefined_org$Customer_Equals_Account, na.rm = T)
  mrefined_org$Customer_Equals_Account[is.na(mrefined_org$Customer_Equals_Account)] = Mode_ORI_ACC_CUR
  mrefined_org$Customer_Equals_Account = factor(mrefined_org$Customer_Equals_Account)

mrefined_org$ORIGINAL_ACCOUNT_CURRENCY = as.character(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)
  Mode_ORI_ACC_CUR = Mode(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY, na.rm = T)
  mrefined_org$ORIGINAL_ACCOUNT_CURRENCY[is.na(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)] = Mode_ORI_ACC_CUR
  mrefined_org$ORIGINAL_ACCOUNT_CURRENCY = factor(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)

mrefined_org$STATUS = as.character(mrefined_org$STATUS)
  Mode_STATUS = Mode(mrefined_org$STATUS, na.rm = T)
  mrefined_org$STATUS[is.na(mrefined_org$STATUS)] = Mode_STATUS
  mrefined_org$STATUS = factor(mrefined_org$STATUS) 
  
mrefined_org$CUSTOMER_REGION = as.character(mrefined_org$CUSTOMER_REGION)
  Mode_CUSTOMER_REGION = Mode(mrefined_org$CUSTOMER_REGION, na.rm = T)
  mrefined_org$CUSTOMER_REGION[is.na(mrefined_org$CUSTOMER_REGION)] = Mode_CUSTOMER_REGION
  mrefined_org$CUSTOMER_REGION = factor(mrefined_org$CUSTOMER_REGION) 
  
mrefined_org$COUNTRY_OF_ORIGIN = as.character(mrefined_org$COUNTRY_OF_ORIGIN)
  Mode_COUNTRY_OF_ORIGIN = Mode(mrefined_org$COUNTRY_OF_ORIGIN, na.rm = T)
  mrefined_org$COUNTRY_OF_ORIGIN[is.na(mrefined_org$COUNTRY_OF_ORIGIN)] = Mode_COUNTRY_OF_ORIGIN
  mrefined_org$COUNTRY_OF_ORIGIN = factor(mrefined_org$COUNTRY_OF_ORIGIN)  
  
mrefined_org$COUNTRY_OF_RESIDENCE_abbrev = as.character(mrefined_org$COUNTRY_OF_RESIDENCE_abbrev)
  Mode_COUNTRY_OF_ORIGIN = Mode(mrefined_org$COUNTRY_OF_RESIDENCE_abbrev, na.rm = T)
  mrefined_org$COUNTRY_OF_RESIDENCE_abbrev[is.na(mrefined_org$COUNTRY_OF_RESIDENCE_abbrev)] = Mode_COUNTRY_OF_ORIGIN
  mrefined_org$COUNTRY_OF_RESIDENCE_abbrev = factor(mrefined_org$COUNTRY_OF_RESIDENCE_abbrev)  
  
# 
mrefined_org=mrefined_org[complete.cases(mrefined_org),]

mrefined_org$logint_NUM_ACCOUNTS = log_int(mrefined_org$NUM_ACCOUNTS)
mrefined_org$logint_NUM_CASES = log_int(mrefined_org$NUM_CASES)
mrefined_org$logint_CUSTOMER_FOR_DAYS = log_int(mrefined_org$CUSTOMER_FOR_DAYS)
mrefined_org$logneg_NEW_ACCOUNT_BALANCE = log_neg(mrefined_org$NEW_ACCOUNT_BALANCE)
#refined_org_imp=mice(refined_org,maxit=0,seed=500)
#summary(refined_org_imp)
#densityplot(refined_org_imp,~NEW_ACCOUNT_BALANCE) #put here a variable of interest #
#stripplot(data_missing,pch=20,cex=1.2)



###################################
### EXPLORATORY ANALYSIS - ORG ####
###################################

# Continous Vars 
# Vars that need transformation for better viz (right-skewed; e.g log) : NUM_CASES, NEW_ACCOUNT_BALANCE,
# NUM_ACCOUNTS, CUSTOMER_FOR_DAYS

density_gg(mrefined_org,mrefined_org$NUM_CASES,mrefined_org$SAR)
  density_gg(mrefined_org,mrefined_org$logint_NUM_CASES,mrefined_org$SAR)

density_gg(mrefined_org,mrefined_org$NEW_ACCOUNT_BALANCE,mrefined_org$SAR)
  density_gg(mrefined_org,mrefined_org$logneg_NEW_ACCOUNT_BALANCE,mrefined_org$SAR)

density_gg(mrefined_org,mrefined_org$NUM_ACCOUNTS,mrefined_org$SAR)
  density_gg(mrefined_org,mrefined_org$logint_NUM_ACCOUNTS,mrefined_org$SAR)

density_gg(mrefined_org,mrefined_org$CUSTOMER_FOR_DAYS,mrefined_org$SAR)
  density_gg(mrefined_org,mrefined_org$logint_CUSTOMER_FOR_DAYS,mrefined_org$SAR)

# Categorical Vars
stacked_gg(mrefined_org,mrefined_org$EVENT_MONTH,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$SCENARIO,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$TXN_TYPE,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$INSTRUMENT,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$REGION,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$SCOPE,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$BASE_CURRENCY_AMOUNT,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$RAISED_ON,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$PEP_FLAG,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$SPECIAL_ATTENTION_FLAG,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$BUSINESS_TYPE2,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$CUSTOMER_STATUS,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$TIME_PERIOD,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$CUSTOMER_REGION,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$DISTRICT_OF_BUDAPEST,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$COUNTRY_OF_RESIDENCE_abbrev,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$COUNTRY_OF_ORIGIN,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$STATUS,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$ORIGINAL_ACCOUNT_CURRENCY,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$CUSTOMER_SEGMENT,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$SC01_Amount_Exceding_250000__HUF_,mrefined_org$SAR)

stacked_gg(mrefined_org,mrefined_org$Customer_Equals_Account,mrefined_org$SAR)

aggr_plot = aggr(refined_org, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, 
                 labels=names(refined_org), cex.axis=.7, gap=3, 
                 ylab=c("Histogram of missing data","Pattern"))

################### 
# RIDIT SCORES ####  
################### 
# WORD OF CAUTION: Don't rerun this code as join fn will create duplicates

# Ridit Scores for tab1
tab1=prop.table(table(mrefined_org$SAR,mrefined_org$SCENARIO),2) %>%
  data.frame() %>% filter(Var1==1) %>% arrange(desc(Freq))
colnames(tab1) = c("Var1", "SCENARIO", "Freq_SAR")  

tab1_2=prop.table(table(mrefined_org$SCENARIO)) %>% data.frame()
colnames(tab1_2) = c('SCENARIO', 'Freq')
joined_tab1=left_join(tab1,tab1_2, by = 'SCENARIO')

ridit_tab1=ridit_scores(joined_tab1$Freq) %>% data.frame()
colnames(ridit_tab1)='Ridit_Scores'
ridit_tab1=bind_cols(joined_tab1,ridit_tab1) %>% select(c('SCENARIO','Ridit_Scores'))
colnames(ridit_tab1)=c('SCENARIO','RS_SCENARIO')
mrefined_org=left_join(mrefined_org,ridit_tab1,by = 'SCENARIO')

# Ridit Scores for tab2
tab2=prop.table(table(mrefined_org$SAR,mrefined_org$EVENT_MONTH),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab2) = c("Var1", "EVENT_MONTH", "Freq_SAR")  

tab2_2=prop.table(table(mrefined_org$EVENT_MONTH)) %>%
  data.frame()
colnames(tab2_2) = c('EVENT_MONTH', 'Freq')
joined_tab2=left_join(tab2,tab2_2, by = 'EVENT_MONTH')

ridit_tab2=ridit_scores(joined_tab2$Freq) %>% data.frame()
colnames(ridit_tab2)='Ridit_Scores'
ridit_tab2=bind_cols(joined_tab2,ridit_tab2) %>% select(c('EVENT_MONTH','Ridit_Scores'))
colnames(ridit_tab2)=c('EVENT_MONTH','RS_EVENT_MONTH')
mrefined_org=left_join(mrefined_org,ridit_tab2,by = 'EVENT_MONTH')

# Ridit Scores for tab3
tab3=prop.table(table(mrefined_org$SAR,mrefined_org$BUSINESS_TYPE2),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab3) = c("Var1", "BUSINESS_TYPE2", "Freq_SAR")  

tab3_2=prop.table(table(mrefined_org$BUSINESS_TYPE2)) %>%
  data.frame()
colnames(tab3_2) = c('BUSINESS_TYPE2', 'Freq')
joined_tab3=left_join(tab3,tab3_2, by = 'BUSINESS_TYPE2')

ridit_tab3=ridit_scores(joined_tab3$Freq) %>% data.frame()
colnames(ridit_tab3)='Ridit_Scores'
ridit_tab3=bind_cols(joined_tab3,ridit_tab3) %>% select(c('BUSINESS_TYPE2','Ridit_Scores'))
colnames(ridit_tab3)=c('BUSINESS_TYPE2','RS_BUSINESS_TYPE2')
mrefined_org=left_join(mrefined_org,ridit_tab3,by = 'BUSINESS_TYPE2')

# Ridit Scores for tab4
tab4=prop.table(table(mrefined_org$SAR,mrefined_org$COUNTRY_OF_RESIDENCE_abbrev),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab4) = c("Var1", "COUNTRY_OF_RESIDENCE_abbrev", "Freq_SAR")  

tab4_2=prop.table(table(mrefined_org$COUNTRY_OF_RESIDENCE_abbrev)) %>%
  data.frame()
colnames(tab4_2) = c('COUNTRY_OF_RESIDENCE_abbrev', 'Freq')
joined_tab4=left_join(tab4,tab4_2, by = 'COUNTRY_OF_RESIDENCE_abbrev')

ridit_tab4=ridit_scores(joined_tab4$Freq) %>% data.frame()
colnames(ridit_tab4)='Ridit_Scores'
ridit_tab4=bind_cols(joined_tab4,ridit_tab4) %>% select(c('COUNTRY_OF_RESIDENCE_abbrev','Ridit_Scores'))
colnames(ridit_tab4)=c('COUNTRY_OF_RESIDENCE_abbrev','RS_COUNTRY_OF_RESIDENCE_abbrev')
mrefined_org=left_join(mrefined_org,ridit_tab4,by = 'COUNTRY_OF_RESIDENCE_abbrev')

# Ridit Scores for tab5
tab5=prop.table(table(mrefined_org$SAR,mrefined_org$TXN_TYPE),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab5) = c("Var1", "TXN_TYPE", "Freq_SAR")  

tab5_2=prop.table(table(mrefined_org$TXN_TYPE)) %>%
  data.frame()
colnames(tab5_2) = c('TXN_TYPE', 'Freq')
joined_tab5=left_join(tab5,tab5_2, by = 'TXN_TYPE')

ridit_tab5=ridit_scores(joined_tab5$Freq) %>% data.frame()
colnames(ridit_tab5)='Ridit_Scores'
ridit_tab5=bind_cols(joined_tab5,ridit_tab5) %>% select(c('TXN_TYPE','Ridit_Scores'))
colnames(ridit_tab5)=c('TXN_TYPE','RS_TXN_TYPE')
mrefined_org=left_join(mrefined_org,ridit_tab5,by = 'TXN_TYPE')

# Ridit Scores for tab6
tab6=prop.table(table(mrefined_org$SAR,mrefined_org$INSTRUMENT),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab6) = c("Var1", "INSTRUMENT", "Freq_SAR")  

tab6_2=prop.table(table(mrefined_org$INSTRUMENT)) %>%
  data.frame()
colnames(tab6_2) = c('INSTRUMENT', 'Freq')
joined_tab6=left_join(tab6,tab6_2, by = 'INSTRUMENT')

ridit_tab6=ridit_scores(joined_tab6$Freq) %>% data.frame()
colnames(ridit_tab6)='Ridit_Scores'
ridit_tab6=bind_cols(joined_tab6,ridit_tab6) %>% select(c('INSTRUMENT','Ridit_Scores'))
colnames(ridit_tab6)=c('INSTRUMENT','RS_INSTRUMENT')
mrefined_org=left_join(mrefined_org,ridit_tab6,by = 'INSTRUMENT')

# Ridit Scores for tab7
tab7=prop.table(table(mrefined_org$SAR,mrefined_org$SCOPE),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab7) = c("Var1", "SCOPE", "Freq_SAR")  

tab7_2=prop.table(table(mrefined_org$SCOPE)) %>%
  data.frame()
colnames(tab7_2) = c('SCOPE', 'Freq')
joined_tab7=left_join(tab7,tab7_2, by = 'SCOPE')

ridit_tab7=ridit_scores(joined_tab7$Freq) %>% data.frame()
colnames(ridit_tab7)='Ridit_Scores'
ridit_tab7=bind_cols(joined_tab7,ridit_tab7) %>% select(c('SCOPE','Ridit_Scores'))
colnames(ridit_tab7)=c('SCOPE','RS_SCOPE')
mrefined_org=left_join(mrefined_org,ridit_tab7,by = 'SCOPE')

# Ridit Scores for tab8
tab8=prop.table(table(mrefined_org$SAR,mrefined_org$REGION),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab8) = c("Var1", "REGION", "Freq_SAR")  

tab8_2=prop.table(table(mrefined_org$REGION)) %>%
  data.frame()
colnames(tab8_2) = c('REGION', 'Freq')
joined_tab8=left_join(tab8,tab8_2, by = 'REGION')

ridit_tab8=ridit_scores(joined_tab8$Freq) %>% data.frame()
colnames(ridit_tab8)='Ridit_Scores'
ridit_tab8=bind_cols(joined_tab8,ridit_tab8) %>% select(c('REGION','Ridit_Scores'))
colnames(ridit_tab8)=c('REGION','RS_REGION')
mrefined_org=left_join(mrefined_org,ridit_tab8,by = 'REGION')

# Ridit Scores for tab9
tab9=prop.table(table(mrefined_org$SAR,mrefined_org$BASE_CURRENCY_AMOUNT),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab9) = c("Var1", "BASE_CURRENCY_AMOUNT", "Freq_SAR")  

tab9_2=prop.table(table(mrefined_org$BASE_CURRENCY_AMOUNT)) %>%
  data.frame()
colnames(tab9_2) = c('BASE_CURRENCY_AMOUNT', 'Freq')
joined_tab9=left_join(tab9,tab9_2, by = 'BASE_CURRENCY_AMOUNT')

ridit_tab9=ridit_scores(joined_tab9$Freq) %>% data.frame()
colnames(ridit_tab9)='Ridit_Scores'
ridit_tab9=bind_cols(joined_tab9,ridit_tab9) %>% select(c('BASE_CURRENCY_AMOUNT','Ridit_Scores'))
colnames(ridit_tab9)=c('BASE_CURRENCY_AMOUNT','RS_BASE_CURRENCY_AMOUNT')
mrefined_org=left_join(mrefined_org,ridit_tab9,by = 'BASE_CURRENCY_AMOUNT')

# Ridit Scores for tab10
tab10=prop.table(table(mrefined_org$SAR,mrefined_org$RAISED_ON),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab10) = c("Var1", "RAISED_ON", "Freq_SAR")  

tab10_2=prop.table(table(mrefined_org$RAISED_ON)) %>%
  data.frame()
colnames(tab10_2) = c('RAISED_ON', 'Freq')
joined_tab10=left_join(tab10,tab10_2, by = 'RAISED_ON')

ridit_tab10=ridit_scores(joined_tab10$Freq) %>% data.frame()
colnames(ridit_tab10)='Ridit_Scores'
ridit_tab10=bind_cols(joined_tab10,ridit_tab10) %>% select(c('RAISED_ON','Ridit_Scores'))
colnames(ridit_tab10)=c('RAISED_ON','RS_RAISED_ON')
mrefined_org=left_join(mrefined_org,ridit_tab10,by = 'RAISED_ON')

# Ridit Scores for tab11
tab11=prop.table(table(mrefined_org$SAR,mrefined_org$COUNTRY_OF_ORIGIN),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab11) = c("Var1", "COUNTRY_OF_ORIGIN", "Freq_SAR")  

tab11_2=prop.table(table(mrefined_org$COUNTRY_OF_ORIGIN)) %>%
  data.frame()
colnames(tab11_2) = c('COUNTRY_OF_ORIGIN', 'Freq')
joined_tab11=left_join(tab11,tab11_2, by = 'COUNTRY_OF_ORIGIN')

ridit_tab11=ridit_scores(joined_tab11$Freq) %>% data.frame()
colnames(ridit_tab11)='Ridit_Scores'
ridit_tab11=bind_cols(joined_tab11,ridit_tab11) %>% select(c('COUNTRY_OF_ORIGIN','Ridit_Scores'))
colnames(ridit_tab11)=c('COUNTRY_OF_ORIGIN','RS_COUNTRY_OF_ORIGIN')
mrefined_org=left_join(mrefined_org,ridit_tab11,by = 'COUNTRY_OF_ORIGIN')


# Ridit Scores for tab13
tab13=prop.table(table(mrefined_org$SAR,mrefined_org$PEP_FLAG),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab13) = c("Var1", "PEP_FLAG", "Freq_SAR")  

tab13_2=prop.table(table(mrefined_org$PEP_FLAG)) %>%
  data.frame()
colnames(tab13_2) = c('PEP_FLAG', 'Freq')
joined_tab13=left_join(tab13,tab13_2, by = 'PEP_FLAG')

ridit_tab13=ridit_scores(joined_tab13$Freq) %>% data.frame()
colnames(ridit_tab13)='Ridit_Scores'
ridit_tab13=bind_cols(joined_tab13,ridit_tab13) %>% select(c('PEP_FLAG','Ridit_Scores'))
colnames(ridit_tab13)=c('PEP_FLAG','RS_PEP_FLAG')
mrefined_org=left_join(mrefined_org,ridit_tab13,by = 'PEP_FLAG')

# Ridit Scores for tab14
tab14=prop.table(table(mrefined_org$SAR,mrefined_org$SPECIAL_ATTENTION_FLAG),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab14) = c("Var1", "SPECIAL_ATTENTION_FLAG", "Freq_SAR")  

tab14_2=prop.table(table(mrefined_org$SPECIAL_ATTENTION_FLAG)) %>%
  data.frame()
colnames(tab14_2) = c('SPECIAL_ATTENTION_FLAG', 'Freq')
joined_tab14=left_join(tab14,tab14_2, by = 'SPECIAL_ATTENTION_FLAG')

ridit_tab14=ridit_scores(joined_tab14$Freq) %>% data.frame()
colnames(ridit_tab14)='Ridit_Scores'
ridit_tab14=bind_cols(joined_tab14,ridit_tab14) %>% select(c('SPECIAL_ATTENTION_FLAG','Ridit_Scores'))
colnames(ridit_tab14)=c('SPECIAL_ATTENTION_FLAG','RS_SPECIAL_ATTENTION_FLAG')
mrefined_org=left_join(mrefined_org,ridit_tab14,by = 'SPECIAL_ATTENTION_FLAG')

# Ridit Scores for tab15
tab15=prop.table(table(mrefined_org$SAR,mrefined_org$CUSTOMER_STATUS),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab15) = c("Var1", "CUSTOMER_STATUS", "Freq_SAR")  

tab15_2=prop.table(table(mrefined_org$CUSTOMER_STATUS)) %>%
  data.frame()
colnames(tab15_2) = c('CUSTOMER_STATUS', 'Freq')
joined_tab15=left_join(tab15,tab15_2, by = 'CUSTOMER_STATUS')

ridit_tab15=ridit_scores(joined_tab15$Freq) %>% data.frame()
colnames(ridit_tab15)='Ridit_Scores'
ridit_tab15=bind_cols(joined_tab15,ridit_tab15) %>% select(c('CUSTOMER_STATUS','Ridit_Scores'))
colnames(ridit_tab15)=c('CUSTOMER_STATUS','RS_CUSTOMER_STATUS')
mrefined_org=left_join(mrefined_org,ridit_tab15,by = 'CUSTOMER_STATUS')

# Ridit Scores for tab16
tab16=prop.table(table(mrefined_org$SAR,mrefined_org$CUSTOMER_REGION),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab16) = c("Var1", "CUSTOMER_REGION", "Freq_SAR")  

tab16_2=prop.table(table(mrefined_org$CUSTOMER_REGION)) %>%
  data.frame()
colnames(tab16_2) = c('CUSTOMER_REGION', 'Freq')
joined_tab16=left_join(tab16,tab16_2, by = 'CUSTOMER_REGION')

ridit_tab16=ridit_scores(joined_tab16$Freq) %>% data.frame()
colnames(ridit_tab16)='Ridit_Scores'
ridit_tab16=bind_cols(joined_tab16,ridit_tab16) %>% select(c('CUSTOMER_REGION','Ridit_Scores'))
colnames(ridit_tab16)=c('CUSTOMER_REGION','RS_CUSTOMER_REGION')
mrefined_org=left_join(mrefined_org,ridit_tab16,by = 'CUSTOMER_REGION')

# Ridit Scores for tab17
tab17=prop.table(table(mrefined_org$SAR,mrefined_org$CUSTOMER_SEGMENT),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab17) = c("Var1", "CUSTOMER_SEGMENT", "Freq_SAR")  

tab17_2=prop.table(table(mrefined_org$CUSTOMER_SEGMENT)) %>%
  data.frame()
colnames(tab17_2) = c('CUSTOMER_SEGMENT', 'Freq')
joined_tab17=left_join(tab17,tab17_2, by = 'CUSTOMER_SEGMENT')

ridit_tab17=ridit_scores(joined_tab17$Freq) %>% data.frame()
colnames(ridit_tab17)='Ridit_Scores'
ridit_tab17=bind_cols(joined_tab17,ridit_tab17) %>% select(c('CUSTOMER_SEGMENT','Ridit_Scores'))
colnames(ridit_tab17)=c('CUSTOMER_SEGMENT','RS_CUSTOMER_SEGMENT')
mrefined_org=left_join(mrefined_org,ridit_tab17,by = 'CUSTOMER_SEGMENT')

# Ridit Scores for tab18
tab18=prop.table(table(mrefined_org$SAR,mrefined_org$SC01_Amount_Exceding_250000__HUF_),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab18) = c("Var1", "SC01_Amount_Exceding_250000__HUF_", "Freq_SAR")  

tab18_2=prop.table(table(mrefined_org$SC01_Amount_Exceding_250000__HUF_)) %>%
  data.frame()
colnames(tab18_2) = c('SC01_Amount_Exceding_250000__HUF_', 'Freq')
joined_tab18=left_join(tab18,tab18_2, by = 'SC01_Amount_Exceding_250000__HUF_')

ridit_tab18=ridit_scores(joined_tab18$Freq) %>% data.frame()
colnames(ridit_tab18)='Ridit_Scores'
ridit_tab18=bind_cols(joined_tab18,ridit_tab18) %>% select(c('SC01_Amount_Exceding_250000__HUF_','Ridit_Scores'))
colnames(ridit_tab18)=c('SC01_Amount_Exceding_250000__HUF_','RS_SC01_Amount_Exceding_250000__HUF_')
mrefined_org=left_join(mrefined_org,ridit_tab18,by = 'SC01_Amount_Exceding_250000__HUF_')

# Ridit Scores for tab19
tab19=prop.table(table(mrefined_org$SAR,mrefined_org$TIME_PERIOD),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab19) = c("Var1", "TIME_PERIOD", "Freq_SAR")  

tab19_2=prop.table(table(mrefined_org$TIME_PERIOD)) %>%
  data.frame()
colnames(tab19_2) = c('TIME_PERIOD', 'Freq')
joined_tab19=left_join(tab19,tab19_2, by = 'TIME_PERIOD')

ridit_tab19=ridit_scores(joined_tab19$Freq) %>% data.frame()
colnames(ridit_tab19)='Ridit_Scores'
ridit_tab19=bind_cols(joined_tab19,ridit_tab19) %>% select(c('TIME_PERIOD','Ridit_Scores'))
colnames(ridit_tab19)=c('TIME_PERIOD','RS_TIME_PERIOD')
mrefined_org=left_join(mrefined_org,ridit_tab19,by = 'TIME_PERIOD')

# Ridit Scores for tab20
tab20=prop.table(table(mrefined_org$SAR,mrefined_org$ORIGINAL_ACCOUNT_CURRENCY),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab20) = c("Var1", "ORIGINAL_ACCOUNT_CURRENCY", "Freq_SAR")  

tab20_2=prop.table(table(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)) %>%
  data.frame()
colnames(tab20_2) = c('ORIGINAL_ACCOUNT_CURRENCY', 'Freq')
joined_tab20=left_join(tab20,tab20_2, by = 'ORIGINAL_ACCOUNT_CURRENCY')

ridit_tab20=ridit_scores(joined_tab20$Freq) %>% data.frame()
colnames(ridit_tab20)='Ridit_Scores'
ridit_tab20=bind_cols(joined_tab20,ridit_tab20) %>% select(c('ORIGINAL_ACCOUNT_CURRENCY','Ridit_Scores'))
colnames(ridit_tab20)=c('ORIGINAL_ACCOUNT_CURRENCY','RS_ORIGINAL_ACCOUNT_CURRENCY')
mrefined_org=left_join(mrefined_org,ridit_tab20,by = 'ORIGINAL_ACCOUNT_CURRENCY')

# Ridit Scores for tab21
tab21=prop.table(table(mrefined_org$SAR,mrefined_org$Customer_Equals_Account),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab21) = c("Var1", "Customer_Equals_Account", "Freq_SAR")  

tab21_2=prop.table(table(mrefined_org$Customer_Equals_Account)) %>%
  data.frame()
colnames(tab21_2) = c('Customer_Equals_Account', 'Freq')
joined_tab21=left_join(tab21,tab21_2, by = 'Customer_Equals_Account')

ridit_tab21=ridit_scores(joined_tab21$Freq) %>% data.frame()
colnames(ridit_tab21)='Ridit_Scores'
ridit_tab21=bind_cols(joined_tab21,ridit_tab21) %>% select(c('Customer_Equals_Account','Ridit_Scores'))
colnames(ridit_tab21)=c('Customer_Equals_Account','RS_Customer_Equals_Account')
mrefined_org=left_join(mrefined_org,ridit_tab21,by = 'Customer_Equals_Account')

# Ridit Scores for tab22
tab22=prop.table(table(mrefined_org$SAR,mrefined_org$STATUS),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab22) = c("Var1", "STATUS", "Freq_SAR")  

tab22_2=prop.table(table(mrefined_org$STATUS)) %>%
  data.frame()
colnames(tab22_2) = c('STATUS', 'Freq')
joined_tab22=left_join(tab22,tab22_2, by = 'STATUS')

ridit_tab22=ridit_scores(joined_tab22$Freq) %>% data.frame()
colnames(ridit_tab22)='Ridit_Scores'
ridit_tab22=bind_cols(joined_tab22,ridit_tab22) %>% select(c('STATUS','Ridit_Scores'))
colnames(ridit_tab22)=c('STATUS','RS_STATUS')
mrefined_org=left_join(mrefined_org,ridit_tab22,by = 'STATUS')

# Ridit Scores for tab23
tab23=prop.table(table(mrefined_org$SAR,mrefined_org$DISTRICT_OF_BUDAPEST),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab23) = c("Var1", "DISTRICT_OF_BUDAPEST", "Freq_SAR")  

tab23_2=prop.table(table(mrefined_org$DISTRICT_OF_BUDAPEST)) %>%
  data.frame()
colnames(tab23_2) = c('DISTRICT_OF_BUDAPEST', 'Freq')
joined_tab23=left_join(tab23,tab23_2, by = 'DISTRICT_OF_BUDAPEST')

ridit_tab23=ridit_scores(joined_tab23$Freq) %>% data.frame()
colnames(ridit_tab23)='Ridit_Scores'
ridit_tab23=bind_cols(joined_tab23,ridit_tab23) %>% select(c('DISTRICT_OF_BUDAPEST','Ridit_Scores'))
colnames(ridit_tab23)=c('DISTRICT_OF_BUDAPEST','RS_DISTRICT_OF_BUDAPEST')
mrefined_org=left_join(mrefined_org,ridit_tab23,by = 'DISTRICT_OF_BUDAPEST')

rm(list=ls(pattern='joined')); rm(list=ls(pattern='tab')) 
#####################################
### CLUSTER NONHIERARCHICAL - ORG ###
#####################################

mrefined_num_org = select_if(mrefined_org, is.numeric) %>% 
  select(-contains('log')) %>% 
  scale() %>% data.frame()
cluster_df=mrefined_num_org
set.seed(123); smpl_mrefined_num_org=mrefined_num_org[sample(1:nrow(mrefined_num_org),5000),]

# Evaluation of optimal n of clusters : clest suggests k = 3 while gap = 1
set.seed(123); clest = Clest(as.matrix(smpl_mrefined_num_org), maxK = 5, alpha = 0.05, B = 15, B0 = 5, nstart = 1000)

set.seed(123); gap = clusGap(smpl_mrefined_num_org, FUNcluster = clara, K.max = 5)

# CLARA - K=3
set.seed(123); cl3_org=clara(mrefined_num_org, 3 , samples = 50, rngR = T)
cluster_df$labels_k3=cl3_org$clustering
ggplot(cluster_df, aes(x = as.factor(cluster_df$labels_k3), fill = mrefined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))
cl3_org$clusinfo
profile_cl3=cl3_org$medoids

summary(cl3_org)
summary(silhouette(cl3_org))
fviz_cluster(cl3_org,stand = FALSE, geom = "point",
             frame.type = "norm")

table_k3 = table(mrefined_org$SAR,cluster_df$labels_k3) %>%
  prop.table(2)

# S Kmeans  - !!! TIME COMPLEX - tuning paramter 1.89
set.seed(123);kperm=KMeansSparseCluster.permute(smpl_mrefined_num_org, K=3, nperms = 5)
km_cl3_org = KMeansSparseCluster(mrefined_num_org, K = 3, wbounds = kperm$bestw)
km_cl3_org[[1]]$ws
fviz_cluster(list(data = mrefined_num_org, cluster = km_cl3_org[[1]]$Cs ),stand = FALSE, geom = "point",
             frame.type = "norm")
cluster_df$labels_skm_k3=km_cl3_org[[1]]$Cs
ggplot(cluster_df, aes(x = as.factor(cluster_df$labels_skm_k3), fill = mrefined_org$SAR)) + 
  geom_bar(position = "fill") + theme(axis.text.x = element_text(angle = 90))
km_cl3_org
table_km_k3 = table(mrefined_org$SAR,cluster_df$labels_skm_k3) %>%
  prop.table(2)
cluster_vars = data.frame(unlist(attributes(km_cl3_org[[1]]$ws)),km_cl3_org[[1]]$ws) %>% 
  filter(km_cl3_org[[1]]$ws >0)
colnames(cluster_vars)=c('Feature','Importance')

# RS Kmeans
set.seed(123); rskm_cl3_org = RSKC(d = mrefined_num_org, ncl = 3, alpha = 0.10, L1 = kperm$bestw)
fviz_cluster(list(data = mrefined_num_org, cluster = rskm_cl3_org$labels ),stand = FALSE, geom = "point",
             frame.type = "norm")
cluster_df$labels_rskm_k3=rskm_cl3_org$labels
ggplot(cluster_df, aes(x = as.factor(cluster_df$labels_rskm_k3), fill = mrefined_org$SAR)) + 
  geom_bar(position = "fill") + theme(axis.text.x = element_text(angle = 90))
cluster_vars2 = data.frame(unlist(attributes(rskm_cl3_org$weights)),rskm_cl3_org$weights) %>%
  filter(rskm_cl3_org$weights >0)
colnames(cluster_vars)=c('Feature','Importance')
table_rskm_k3 = table(mrefined_org$SAR,cluster_df$labels_rskm_k3) %>%
  prop.table(2)
# Profile Clustering with Sparse Kmeans




# Cluster Profile for RS Kmeans
  # Most Relevant Vars for Clustering
mrefined_org$rskm_k3 = rskm_cl3_org$labels %>% factor()
stacked_gg(mrefined_org,mrefined_org$rskm_k3,mrefined_org$SAR)
stacked_gg(mrefined_org,mrefined_org$rskm_k3,mrefined_org$TXN_TYPE)
stacked_gg(mrefined_org,mrefined_org$rskm_k3,mrefined_org$SCOPE)
stacked_gg(mrefined_org,mrefined_org$rskm_k3,mrefined_org$INSTRUMENT)
stacked_gg(mrefined_org,mrefined_org$rskm_k3,mrefined_org$REGION)

  # Not relevant Vars for Clustering
density_gg(mrefined_org,mrefined_org$logint_NUM_CASES,mrefined_org$rskm_k3)
density_gg(mrefined_org,mrefined_org$logint_NUM_ACCOUNTS,mrefined_org$rskm_k3)
stacked_gg(mrefined_org,mrefined_org$CUSTOMER_SEGMENT,mrefined_org$rskm_k3)
stacked_gg(mrefined_org,mrefined_org$SCENARIO,mrefined_org$rskm_k3)
stacked_gg(mrefined_org,mrefined_org$STATUS,mrefined_org$rskm_k3)
  # Profiling
rskm_k3_profiles = mrefined_org %>% group_by(mrefined_org$rskm_k3) %>%
  summarise( 
             SAR_RATE = mean(as.numeric(SAR))-1,
             mode_TXN= Mode(TXN_TYPE),
             mode_INST = Mode(INSTRUMENT),
             mode_REGION = Mode(REGION),
             mode_SCOPE = Mode(SCOPE)
            )
########################
# FEATURE SELECTION ####
########################

# Creating different datasets for each cluster
HighRisk_mrefined_org = mrefined_org %>% filter(rskm_k3 == 3) %>%
  select(SAR, NUM_CASES, NUM_ACCOUNTS, NEW_ACCOUNT_BALANCE, CUSTOMER_FOR_DAYS, contains('RS_'))
MedRisk_mrefined_org = mrefined_org %>% filter(rskm_k3 == 1) %>%
  select(SAR, NUM_CASES, NUM_ACCOUNTS, NEW_ACCOUNT_BALANCE, CUSTOMER_FOR_DAYS, contains('RS_'))
LowRisk_mrefined_org = mrefined_org %>% filter(rskm_k3 == 2) %>%
  select(SAR, NUM_CASES, NUM_ACCOUNTS, NEW_ACCOUNT_BALANCE, CUSTOMER_FOR_DAYS, contains('RS_'))
# High Risk Cluster
  # Getting the training and test set
set.seed(123); HR_rskm_index = createDataPartition(HighRisk_mrefined_org$SAR,p=.70)
HR_rskm_data_train = HighRisk_mrefined_org[unlist(HR_rskm_index),]
HR_rskm_data_test = HighRisk_mrefined_org[-unlist(HR_rskm_index),]
  # Boruta: Graph
set.seed(123); HR_rskm_boruta = Boruta(HR_rskm_data_train$SAR~., data = HR_rskm_data_train, doTrace = 2)
print(HR_rskm_boruta)
plot(HR_rskm_boruta, xlab = "", xaxt = "n")
lz=lapply(1:ncol(HR_rskm_boruta$ImpHistory),function(i)
  HR_rskm_boruta$ImpHistory[is.finite(HR_rskm_boruta$ImpHistory[,i]),i])
names(lz) = colnames(HR_rskm_boruta$ImpHistory)
Labels = sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
     at = 1:ncol(HR_rskm_boruta$ImpHistory), cex.axis = 0.7)
HR_rskm_boruta_formula=getConfirmedFormula(HR_rskm_boruta)
  # The ranked list of most relevant features
HR_featlist = attStats(HR_rskm_boruta) %>%
  rownames_to_column(var = 'Features')
HR_featlist_top10 = subset(HR_featlist, select = c('Feature','medianImp')) %>%
  mutate(rank = rank(-HR_featlist$medianImp)) %>% arrange(rank)

# Low Risk Cluster
  # Getting the training and test set
set.seed(123); LR_rskm_index = createDataPartition(LowRisk_mrefined_org$SAR,p=.70)
LR_rskm_data_train = LowRisk_mrefined_org[unlist(LR_rskm_index),]
LR_rskm_data_test = LowRisk_mrefined_org[-unlist(LR_rskm_index),]

  # Boruta: Graph
LR_rskm_boruta = Boruta(LR_rskm_data_train$SAR~., data = LR_rskm_data_train, doTrace = 2)
print(LR_rskm_boruta)
plot(LR_rskm_boruta, xlab = "", xaxt = "n")
lz=lapply(1:ncol(LR_rskm_boruta$ImpHistory),function(i)
  LR_rskm_boruta$ImpHistory[is.finite(LR_rskm_boruta$ImpHistory[,i]),i])
names(lz) = colnames(LR_rskm_boruta$ImpHistory)
Labels = sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
     at = 1:ncol(LR_rskm_boruta$ImpHistory), cex.axis = 0.7)
LR_rskm_boruta_formula=getConfirmedFormula(LR_rskm_boruta)
  # The ranked list of most relevant features
LR_featlist = attStats(LR_rskm_boruta) %>%
rownames_to_column(var = 'Features')
LR_featlist_top10 = subset(LR_featlist, select = c('Feature','medianImp')) %>%
  mutate(rank = rank(-LR_featlist$medianImp)) %>% arrange(rank)

# Med Risk Cluster
  # Getting the training and test set
set.seed(123); MR_rskm_index = createDataPartition(MedRisk_mrefined_org$SAR,p=.70)
MR_rskm_data_train = MedRisk_mrefined_org[unlist(MR_rskm_index),]
MR_rskm_data_test = MedRisk_mrefined_org[-unlist(MR_rskm_index),]

  # Boruta: Graph
MR_rskm_boruta = Boruta(MR_rskm_data_train$SAR~., data = MR_rskm_data_train, doTrace = 2)
print(MR_rskm_boruta)
plot(MR_rskm_boruta, xlab = "", xaxt = "n")
lz=lapply(1:ncol(MR_rskm_boruta$ImpHistory),function(i)
  MR_rskm_boruta$ImpHistory[is.finite(MR_rskm_boruta$ImpHistory[,i]),i])
names(lz) = colnames(MR_rskm_boruta$ImpHistory)
Labels = sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
     at = 1:ncol(MR_rskm_boruta$ImpHistory), cex.axis = 0.7)
MR_rskm_boruta_formula=getConfirmedFormula(MR_rskm_boruta)
  # The ranked list of most relevant features
MR_featlist = attStats(MR_rskm_boruta) %>%
  rownames_to_column(var = 'Features')
MR_featlist_top10 = subset(MR_featlist, select = c('Feature','medianImp')) %>%
  mutate(rank = rank(-MR_featlist$medianImp)) %>% arrange(rank)

######################################
### SUPERVISED LEARNING - LOGISTIC ###
######################################

# Subsampling - Downsampling
set.seed(123); Down_LowRisk_mrefined_org = downSample(LowRisk_mrefined_org, LowRisk_mrefined_org$SAR)
Logit_Fit_DLow = glm(SAR ~ NUM_CASES + CUSTOMER_FOR_DAYS + RS_SCENARIO + RS_EVENT_MONTH + NUM_ACCOUNTS + NEW_ACCOUNT_BALANCE,
                      data = Down_LowRisk_mrefined_org, family = binomial )
NagelkerkeR2(Logit_Fit_DLow)
(1-exp((Logit_Fit_DLow$dev-Logit_Fit_DLow$null)/nrow(Down_LowRisk_mrefined_org)))/(1-exp(-Logit_Fit_DLow$null/nrow(Down_LowRisk_mrefined_org)))


# Upsampling
set.seed(123); Up_LowRisk_mrefined_org = upSample(LowRisk_mrefined_org, LowRisk_mrefined_org$SAR)
Logit_Fit_ULow = glm(SAR ~ NUM_CASES + CUSTOMER_FOR_DAYS + RS_SCENARIO + RS_EVENT_MONTH + NUM_ACCOUNTS + NEW_ACCOUNT_BALANCE,
                     data = Up_LowRisk_mrefined_org, family = binomial )
(1-exp((Logit_Fit_ULow$dev-Logit_Fit_ULow$null)/nrow(Up_LowRisk_mrefined_org)))/(1-exp(-Logit_Fit_ULow$null/nrow(Up_LowRisk_mrefined_org)))


################
# EXPORTING ####
################

HR_excel = createWorkbook()
HR_excel1 = createSheet(wb = HR_excel, sheetName = 'HR_training')
HR_excel2 = createSheet(wb = HR_excel, sheetName = 'HR_test')
# data(HR_rskm_data_train); data(HR_rskm_data_test)
addDataFrame(x = HR_rskm_data_train, sheet = HR_excel1)
addDataFrame(x = HR_rskm_data_test, sheet = HR_excel2)
saveWorkbook(HR_excel, 'HR.xlsx')
