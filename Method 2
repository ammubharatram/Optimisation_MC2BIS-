######################################
#### DATA LOADING & PREPROCESSING ####
######################################

rm(list=ls())
library(ggplot2)
library(Ridit)
library(GGally)
library(VIM)
library(readr)
library(translate)
library(data.table)
library(plyr)
library(dplyr)
library(compare)
library(reshape2)
library(mice)
library(caret)
library(Boruta)
library(cluster)
## Ridit Function
ridit_scores=function(y){
  x = vector('numeric')
  for (i in 1:length(y)) {
    
    x[i]=(sum(y[1:i])-sum(y[length(y):(i)]))
  }
  return(x)
}

# Load data properly
setwd("C:/Users/orteg/Dropbox/MC2BIS/VS - OPT data")
data=fread("Hungarian_Data_updated_col_names_CSV_new_acc_bal_incl.csv",na.strings = c('',' ','NA'))
original_data=data[1:57383,]

# Make one new variable - if customer branch and account branch are equal then 1 and if not then 0, otherwise NA
original_data$Customer_Equals_Account=ifelse(original_data$CUSTOMER_BRANCH==original_data$ACCOUNT_BRANCH,0,1)
data= subset(original_data, select=-c(EqualTo,Compound_ID,Unique,REASON_FOR_CLOSURE,CUSTOMER_REGION,
                                       DESCRIPTION,CREATION_DATE,CREATION_DATE,LAST_UPDATED,EVENT_DATE,
                                       AGE_IN_DAYS,ACTION_NUM, TRANSACTION_ID,CREDIT_DEBIT_CODE, TXN_TYPE_DESC,
                                       ASSIGNED_TO,ASSIGNED_BY,ORIGINAL_CURRENCY_AMOUNT,ORIGINAL_CURRENCY,
                                       POSTAL_CODE,BRANCH_ID,BUSINESS_TYPE,COUNTRY_OF_RESIDENCE,ACCOUNT_BALANCE,
                                       HOLDING_BANK_NAME,CUSTOMER_BRANCH,ACCOUNT_BRANCH,BRANCH_CODE,CASE_KEY, 
                                       CASE_IDENTIFIER,NUM_ALERTS,NUM_CUSTOMERS,CASE_CREATION_DATE,
                                       INVESTIGATION_LENGTH,NORKOM_SCORE,TRANSACTION_DATE))

# Response Variable (SAR)
n=dim(data)[1]
data$SAR= ifelse(data$CASE_STATUS=="Reported/Closed",1,0)
data$SAR[with(data,is.na(data$SAR) & data$STATUS_NAME=="Closed" )]=0
data$SAR[with(data,is.na(data$SAR) & data$STATUS_NAME=="Linked Closed" )]=0
data$SAR=as.factor(data$SAR)
data$CUSTOMER_SEGMENT=as.factor(data$CUSTOMER_SEGMENT)
data$EVENT_MONTH=as.factor(data$EVENT_MONTH)
data=data[!is.na(data$SAR),]
data$EVENT_MONTH = factor(data$EVENT_MONTH,levels(data$EVENT_MONTH)[c(5, 4, 8, 1, 9, 7, 6,
                                                                      2, 12, 11, 10, 3)])

#count the balance of resoponse
table(data$SAR)
summary(data$SAR)

# Delete NA values from SAR variable
datanew = data[with(data,!is.na(data$SAR))]
# After creation of SAR I can now delete STATUS_NAME and CASE_STATUS
datanew = subset(datanew,select=-c(CASE_STATUS,STATUS_NAME))

# Remove duplicates in column names
duplicates_datanew = datanew[,!duplicated(names(datanew))]
datanew = datanew[,duplicates_datanew,with=F]


# Divide into the Up-Bottom segments: ORG & PRIV
datanew_priv=filter(datanew,CUSTOMER_SEGMENT=='PRIV')
datanew_org=filter(datanew,CUSTOMER_SEGMENT=='GOV' | CUSTOMER_SEGMENT=='SME'| CUSTOMER_SEGMENT=='REG')
datanew_org=subset(datanew_org,select=-c(CUSTOMER_TYPE,CAL_QUARTER))


#*********************
#**** ORG UNITS  *****
#*********************

# Ranking of Missing Values
rankmissing = (sapply(datanew_org,function(x) mean(is.na(x))) %>%
                 sort())
names_miss=names(rankmissing[which(rankmissing < 0.15)])
# some variables' NA are actually informative
datanew_org$DISTRICT_OF_BUDAPEST[is.na(datanew_org$DISTRICT_OF_BUDAPEST)] = "OUTSIDE_BUDAPEST"
datanew_org$TXN_TYPE[is.na(datanew_org$TXN_TYPE)] = "NOT_A_TRANSACTION"
datanew_org$INSTRUMENT[is.na(datanew_org$INSTRUMENT)] = "NOT_A_TRANSACTION"
datanew_org$SCOPE[is.na(datanew_org$SCOPE)] = "NOT_A_TRANSACTION"
datanew_org$REGION[is.na(datanew_org$REGION)] = "NOT_A_TRANSACTION"
datanew_org$BASE_CURRENCY_AMOUNT[is.na(datanew_org$BASE_CURRENCY_AMOUNT)] = "NOT_A_TRANSACTION"
# Making Factor some variables
datanew$DISTRICT_OF_BUDAPEST=as.factor(datanew$DISTRICT_OF_BUDAPEST)

# Again Ranking of Missing Values
rankmissing = (sapply(datanew_org,function(x) mean(is.na(x))) %>%
                 sort())
names_miss=names(rankmissing[which(rankmissing < 0.15)])
refined_org=datanew_org[names_miss]
# UPS - The var should be numeric; 6446 is numerical version of 'NOT_A_TRANSACTION'
refined_org$BASE_CURRENCY_AMOUNT[which(refined_org$BASE_CURRENCY_AMOUNT=='NOT_A_TRANSACTION')]=NA
refined_org$BASE_CURRENCY_AMOUNT=as.numeric(refined_org$BASE_CURRENCY_AMOUNT)
refined_org$BASE_CURRENCY_AMOUNT=cut(refined_org$BASE_CURRENCY_AMOUNT,c(quantile(refined_org$BASE_CURRENCY_AMOUNT,na.rm = T)))
refined_org$BASE_CURRENCY_AMOUNT=addNA(refined_org$BASE_CURRENCY_AMOUNT)
# Converting all character vars into factors
var_chr=names(refined_org[names(refined_org) %in% names(select_if(refined_org, is.character))])
refined_org[var_chr]=lapply(refined_org[var_chr],factor)
levels(refined_org$BASE_CURRENCY_AMOUNT)[is.na(levels(refined_org$BASE_CURRENCY_AMOUNT))] = "NOT_A_TRANSACTION"
refined_org$SC01_Amount_Exceding_250000__HUF_=factor(refined_org$SC01_Amount_Exceding_250000__HUF_)
###################################
### EXPLORATORY ANALYSIS - ORG ####
###################################

ggplot(refined_org, aes(x = refined_org$EVENT_MONTH, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = SCENARIO, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = TXN_TYPE, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = INSTRUMENT, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = REGION, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = SCOPE, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = BASE_CURRENCY_AMOUNT, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = RAISED_ON, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = ALERT_CUSTOMER_SEGMENT, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = PEP_FLAG, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = SPECIAL_ATTENTION_FLAG, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = BUSINESS_TYPE2, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = CUSTOMER_STATUS, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = TIME_PERIOD, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = CUSTOMER_REGION, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = DISTRICT_OF_BUDAPEST, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = COUNTRY_OF_RESIDENCE_abbrev, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = COUNTRY_OF_ORIGIN, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = STATUS, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = ORIGINAL_ACCOUNT_CURRENCY, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = CREDIT_DEBIT, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = ORIGINAL_ACCOUNT_CURRENCY, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

ggplot(refined_org, aes(x = SC01_Amount_Exceding_250000__HUF_, fill = refined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))

aggr_plot = aggr(refined_org, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, 
                  labels=names(refined_org), cex.axis=.7, gap=3, 
                  ylab=c("Histogram of missing data","Pattern"))

#####################
# MISSING VALUES ####
#####################

# Missing Values - Numerical
mrefined_org=refined_org
mrefined_org$NEW_ACCOUNT_BALANCE[is.na(mrefined_org$NEW_ACCOUNT_BALANCE)]=median(mrefined_org$NEW_ACCOUNT_BALANCE,na.rm = T)
mrefined_org$Customer_Equals_Account[is.na(mrefined_org$Customer_Equals_Account)]=median(mrefined_org$Customer_Equals_Account, na.rm = T)

# Missing Values - Category
mrefined_org$ORIGINAL_ACCOUNT_CURRENCY = as.character(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)
  mrefined_org$ORIGINAL_ACCOUNT_CURRENCY[is.na(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)] = 'NOT_A_TRANSACTION'
  mrefined_org$ORIGINAL_ACCOUNT_CURRENCY = factor(mrefined_org$ORIGINAL_ACCOUNT_CURRENCY)

mrefined_org$CREDIT_DEBIT = as.character(mrefined_org$CREDIT_DEBIT)
  mrefined_org$CREDIT_DEBIT[is.na(mrefined_org$CREDIT_DEBIT)] = 'NOT_A_TRANSACTION'
  mrefined_org$CREDIT_DEBIT = factor(mrefined_org$CREDIT_DEBIT) 
  
mrefined_org$STATUS = as.character(mrefined_org$STATUS)
  mrefined_org$STATUS[is.na(mrefined_org$STATUS)] = 'NOT_A_TRANSACTION'
  mrefined_org$STATUS = factor(mrefined_org$STATUS) 
  
aggr(mrefined_org, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, 
                 labels=names(mrefined_org), cex.axis=.7, gap=3, 
                 ylab=c("Histogram of missing data","Pattern"))

mrefined_org1=mrefined_org[complete.cases(mrefined_org),]


#refined_org_imp=mice(refined_org,maxit=0,seed=500)
#summary(refined_org_imp)
#densityplot(refined_org_imp,~NEW_ACCOUNT_BALANCE) #put here a variable of interest #
#stripplot(data_missing,pch=20,cex=1.2)

#################
# RIDIT SCORES ##
#################

# Ridit Scores for tab1
tab1=prop.table(table(mrefined_org1$SAR,mrefined_org1$SCENARIO),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab1) = c("Var1", "SCENARIO", "Freq_SAR")  

tab1_2=prop.table(table(mrefined_org1$SCENARIO)) %>%
  data.frame()
colnames(tab1_2) = c('SCENARIO', 'Freq')
joined_tab1=left_join(tab1,tab1_2, by = 'SCENARIO')

ridit_tab1=ridit_scores(joined_tab1$Freq) %>% data.frame()
colnames(ridit_tab1)='Ridit_Scores'
ridit_tab1=bind_cols(joined_tab1,ridit_tab1) %>% select(c('SCENARIO','Ridit_Scores'))
colnames(ridit_tab1)=c('SCENARIO','RS_SCENARIO')
left_join(mrefined_org1,ridit_tab1,by = 'SCENARIO')
# Ridit Scores for tab2
tab2=prop.table(table(mrefined_org1$SAR,mrefined_org1$EVENT_MONTH),2) %>%
  data.frame() %>% 
  filter(Var1==1) %>% 
  arrange(desc(Freq))
colnames(tab1) = c("Var1", "EVENT_MONTH", "Freq_SAR")  

tab1_2=prop.table(table(mrefined_org1$SCENARIO)) %>%
  data.frame()
colnames(tab1_2) = c('SCENARIO', 'Freq')
joined_tab1=left_join(tab1,tab1_2, by = 'SCENARIO')

ridit_tab1=ridit_scores(joined_tab1$Freq) %>% data.frame()
colnames(ridit_tab1)='Ridit_Scores'
ridit_tab1=bind_cols(joined_tab1,ridit_tab1) %>% select(c('SCENARIO','Ridit_Scores'))
colnames(ridit_tab1)=c('SCENARIO','RS_SCENARIO')
left_join(mrefined_org1,ridit_tab1,by = 'SCENARIO')
###

tab2=table(mrefined_org1$SAR,mrefined_org1$EVENT_MONTH)
tab3=table(mrefined_org1$SAR,mrefined_org1$BUSINESS_TYPE2)
tab4=table(mrefined_org1$SAR,mrefined_org1$COUNTRY_OF_RESIDENCE_abbrev)
tab5=table(mrefined_org1$SAR,mrefined_org1$TXN_TYPE)
tab6=table(mrefined_org1$SAR,mrefined_org1$INSTRUMENT)
tab7=table(mrefined_org1$SAR,mrefined_org1$SCOPE)
tab8=table(mrefined_org1$SAR,mrefined_org1$REGION)
tab9=table(mrefined_org1$SAR,mrefined_org1$BASE_CURRENCY_AMOUNT)
tab10=table(mrefined_org1$SAR,mrefined_org1$RAISED_ON)
tab11=table(mrefined_org1$SAR,mrefined_org1$COUNTRY_OF_ORIGIN)
tab12=table(mrefined_org1$SAR,mrefined_org1$ALERT_CUSTOMER_SEGMENT)
tab13=table(mrefined_org1$SAR,mrefined_org1$PEP_FLAG)
tab14=table(mrefined_org1$SAR,mrefined_org1$SPECIAL_ATTENTION_FLAG)
tab15=table(mrefined_org1$SAR,mrefined_org1$CUSTOMER_STATUS)
tab16=table(mrefined_org1$SAR,mrefined_org1$CUSTOMER_REGION)
tab17=table(mrefined_org1$SAR,mrefined_org1$CUSTOMER_SEGMENT)
tab18=table(mrefined_org1$SAR,mrefined_org1$SC01_Amount_Exceding_250000__HUF_)
tab19=table(mrefined_org1$SAR,mrefined_org1$TIME_PERIOD)
tab20=table(mrefined_org1$SAR,mrefined_org1$ORIGINAL_ACCOUNT_CURRENCY)
tab21=table(mrefined_org1$SAR,mrefined_org1$CREDIT_DEBIT)
tab22=table(mrefined_org1$SAR,mrefined_org1$STATUS)
tab23=table(mrefined_org1$SAR,mrefined_org1$DISTRICT_OF_BUDAPEST)


hi=ridit(tab1,g=2, ref = 'SC01')$MeanRidit

mrefined_org1$EVENT_MONTH=ridit(tab2,g=2, ref = 'January')$MeanRidit
mrefined_org1$BUSINESS_TYPE2_2=ridit(tab3,g=2)
mrefined_org1$COUNTRY_OF_RESIDENCE_abbrev_2=ridit(tab4,g=2)
mrefined_org1$TXN_TYPE_2=ridit(tab5,g=2)
mrefined_org1$COUNTRY_OF_ORIGIN_2=ridit(tab6,g=2)
mrefined_org1$CUSTOMER_REGION_2=ridit(tab7,g=2)
mrefined_org1$TIME_PERIOD_2=ridit(tab8,g=2)
mrefined_org1$STATUS=ridit(tab9,g=2)
mrefined_org1$DISTRICT_OF_BUDAPEST=ridit(tab10,g=2)
mrefined_org1$SECOND_PARTY_COUNTRY=ridit(tab11,g=2)


mrefined_org1$SCENARIO.levels





### CLUSTER NONHIERARCHICAL - ORG ###
mrefined_num_org=select_if(mrefined_org1, is.numeric)
# K=5
cl5_org=clara(mrefined_num_org,5)
cluster_df=mrefined_num_org
cluster_df$labels_k5=cl5_org$clustering
ggplot(cluster_df, aes(x = as.factor(cluster_df$labels_k5), fill = mrefined_org1$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))
cl5_org$clusinfo
summary(cl5_org)
summary(silhouette(cl5_org))
# K=4
cl4_org=clara(mrefined_num_org,4)
cluster_df$labels_k4=cl4_org$clustering
ggplot(cluster_df, aes(x = as.factor(cluster_df$labels_k4), fill = mrefined_org1$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))
cl4_org$clusinfo
summary(cl4_org)
summary(silhouette(cl4_org))
# K=3
mrefined_org$labels_k4=NULL
cl3_org=clara(mrefined_num_org,3)
mrefined_org$labels_k3=cl3_org$clustering
ggplot(mrefined_org, aes(x = as.factor(mrefined_org$labels_k3), fill = mrefined_org$SAR)) + 
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 90))
cl3_org$clusinfo
summary(cl3_org)
summary(silhouette(cl3_org))
mrefined_org$labels_k3=NULL

table_k3 = table(mrefined_org$SAR,mrefined_org$labels_k3)
prop.table(table_k3,2)
table_k4 = table(mrefined_org$SAR,mrefined_org$labels_k4)
prop.table(table_k4,2)
table_k5 = table(mrefined_org$SAR,mrefined_org$labels_k5)
prop.table(table_k5,2)
perf_measures_org=list(cl3_org$objective,cl4_org$objective,cl5_org$objective)
perf_measures_org

# Feature reduction - Boruta

index_train=createDataPartition(mrefined_org1$SAR,p=.70)
data_train=mrefined_org1[unlist(index_train),]
  #Use a meaningful set of explanatory vars
data_train=data_train[c(-1)]
set.seed(123)
boruta.train=Boruta(data_train$SAR~., data = data_train, doTrace = 2)
print(boruta.train)
plot(boruta.train, xlab = "", xaxt = "n")
lz=lapply(1:ncol(boruta.train$ImpHistory),function(i)
  boruta.train$ImpHistory[is.finite(boruta.train$ImpHistory[,i]),i])
names(lz) = colnames(boruta.train$ImpHistory)
Labels = sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
     at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
boruta_for=getConfirmedFormula(boruta.train)

featlist=attStats(boruta.train)
featlist1=subset(featlist,select = 'medianImp')
top10=mutate(left, rank = rank(-featlist$medianImp))
class(top10)

fit1=glm(SAR ~ NUM_CASES + CUSTOMER_FOR_DAYS + NEW_ACCOUNT_BALANCE,
         data = data_train, family = binomial)
p=predict(fit1, data_train , type='response')

ggplot(data_train, aes(x=p)) + 
  geom_density(aes(group=SAR, colour=SAR, fill=SAR), alpha=0.3)

